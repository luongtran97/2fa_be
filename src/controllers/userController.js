// Author: TrungQuanDev | https://youtube.com/@trungquandev
import { StatusCodes } from "http-status-codes";
import { pickUser } from "~/utils/formatters";
import { authenticator } from "otplib";
import qrcode from 'qrcode'
// L∆ØU √ù: Trong v√≠ d·ª• v·ªÅ x√°c th·ª±c 2 l·ªõp Two-Factor Authentication (2FA) n√†y th√¨ ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng nedb-promises ƒë·ªÉ l∆∞u v√† truy c·∫≠p d·ªØ li·ªáu t·ª´ m·ªôt file JSON. Coi nh∆∞ file JSON n√†y l√† Database c·ªßa d·ª± √°n.
const Datastore = require("nedb-promises");
const UserDB = Datastore.create("src/database/users.json");
const TwoFactorSecretKeyDB = Datastore.create(
  "src/database/2fa_secret_keys.json"
);
const SERVICE_NAME = "2-FA luongtrandev"

const login = async (req, res) => {
  try {
    const user = await UserDB.findOne({ email: req.body.email });
    // Kh√¥ng t·ªìn t·∫°i user
    if (!user) {
      res.status(StatusCodes.NOT_FOUND).json({ message: "User not found!" });
      return;
    }
    // Ki·ªÉm tra m·∫≠t kh·∫©u "ƒë∆°n gi·∫£n". L∆ØU √ù: Th·ª±c t·∫ø ph·∫£i d√πng bcryptjs ƒë·ªÉ hash m·∫≠t kh·∫©u, ƒë·∫£m b·∫£o m·∫≠t kh·∫©u ƒë∆∞·ª£c b·∫£o m·∫≠t. ·ªû ƒë√¢y ch√∫ng ta l√†m nhanh g·ªçn theo ki·ªÉu so s√°nh string ƒë·ªÉ t·∫≠p trung v√†o n·ªôi dung ch√≠nh l√† 2FA.
    // Mu·ªën h·ªçc v·ªÅ bcryptjs c≈©ng nh∆∞ to√†n di·ªán ki·∫øn th·ª©c ƒë·∫ßy ƒë·ªß v·ªÅ vi·ªác l√†m m·ªôt trang web N√¢ng Cao th√¨ c√°c b·∫°n c√≥ th·ªÉ theo d√µi kh√≥a MERN Stack Advanced n√†y. (Public l√™n ph·∫ßn h·ªôi vi√™n c·ªßa k√™nh v√†o th√°ng 12/2024)
    // https://www.youtube.com/playlist?list=PLP6tw4Zpj-RJbPQfTZ0eCAXH_mHQiuf2G
    if (user.password !== req.body.password) {
      res
        .status(StatusCodes.NOT_ACCEPTABLE)
        .json({ message: "Wrong password!" });
      return;
    }

    res.status(StatusCodes.OK).json(pickUser(user));
  } catch (error) {
    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(error);
  }
};

const getUser = async (req, res) => {

  try {
    const user = await UserDB.findOne({ _id: req.params.id });
    if (!user) {
      res.status(StatusCodes.NOT_FOUND).json({ message: "User not found!" });
      return;
    }

    res.status(StatusCodes.OK).json(pickUser(user));
  } catch (error) {
    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(error);
  }
};

const logout = async (req, res) => {
  try {
    const user = await UserDB.findOne({ _id: req.params.id });
    if (!user) {
      res.status(StatusCodes.NOT_FOUND).json({ message: "User not found!" });
      return;
    }

    // X√≥a phi√™n c·ªßa user trong Database > user_sessions t·∫°i ƒë√¢y khi ƒëƒÉng xu·∫•t

    res.status(StatusCodes.OK).json({ loggedOut: true });
  } catch (error) {
    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(error);
  }
};

const get2FaQrCode = async (req, res) => {
  try {
    const user = await UserDB.findOne({ _id: req.params.id });
    if (!user) {
      res.status(StatusCodes.NOT_FOUND).json({ message: "User not found!" });
      return;
    }

    // Bi·∫øn l∆∞u tr·ªØ 2fa secret key c·ªßa user
    let twoFactorSecretKeyValue = null;
    
    // L·∫•y 2fa secret key 2fa t·ª´ db
    const twoFactorSecretKey = await TwoFactorSecretKeyDB.findOne({
      user_id: user._id,
    });
    console.log("üöÄ ~ twoFactorSecretKey:", twoFactorSecretKey)

    // check n·∫øu l·∫ßn ƒë·∫ßu kh·ªüi t·∫°o 2 fa m√† d∆∞·ªõi db ch∆∞a c√≥
    if (!twoFactorSecretKey) {
      // ch∆∞a c√≥ th√¨ t·∫°o m·ªõi
      console.log('1234')
      const newTwoFactorSecretKey = await TwoFactorSecretKeyDB.insert({
        user_id: user._id,
        value: authenticator.generateSecret(), // t·ª´ th∆∞ vi·ªán otplib t·∫°o ra m·ªôt random secret key m·ªõi ƒë√∫ng chu·∫©n
      });
      twoFactorSecretKeyValue = newTwoFactorSecretKey.value;
    } else {
      // n·∫øu ƒë√£ c√≥ thi l·∫•y ra s·ª≠ d·ª•ng
      twoFactorSecretKeyValue = twoFactorSecretKey.value;
    }

    // t·∫°o OTP token 
    const otpAuthToken = authenticator.keyuri(
      user.username, SERVICE_NAME,twoFactorSecretKeyValue
    ) // h√†m n√†y nh·∫≠n v√†o 3 tham s·ªë t√™n ng∆∞·ªùi dung, t√™n service, factor secterkeyvalue ƒë√£ t·∫°o ·ªü tr√™n

    // t·∫°o 1 ·∫£nh qr code t·ª´ otp token ƒë·ªÉ g·ª≠i v·ªÅ cho client
    const QrCodeUrl = await qrcode.toDataURL(otpAuthToken)

    res.status(StatusCodes.OK).json({ qrcode: QrCodeUrl})

  } catch (error) {
    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(error);
  }
};

export const userController = {
  login,
  getUser,
  logout,
  get2FaQrCode,
};
